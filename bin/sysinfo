#!/bin/sh
#
# fyr 2019 (c) CC | /bin/sh sysinfo
# thanks sshbio, xero, z3bra for providing ideas

FULL=${FULL-▪}
EMPTY=${EMPTY-▬}

f0='[30m'; f1='[31m'; f2='[32m'; f3='[33m'
f4='[34m'; f5='[35m'; f6='[36m'; f7='[37m'
b0='[40m'; b1='[41m'; b2='[42m'; b4='[44m'
b4='[44m'; b5='[45m'; b6='[46m'; b7='[47m'
B='[1m'; R='[0m'; I='[7m'

getSystem() {
    hash crux 2> /dev/null && {
        SYS="$(crux)"
        PACK="$(pkginfo -i | wc -l)"
        return
    }

    hash apk 2> /dev/null && {
        SYS="Alpine Linux $(cat /etc/alpine-release)"
        PACK=$(apk info | wc -l)
        return
    }

    hash hostnamectl 2> /dev/null && {
        OS=$(hostnamectl | grep "Operating System:")

        printf '%s\n' "$OS" | grep -q "Debian\|Ubuntu" && {
            SYS="DEBIAN version $(cat /etc/debian_version)"
            PACK=$(dpkg-query -f '${binary:Package}\n' -W | wc -l)
            return
        }

        printf '%s\n' "$OS" | grep -q "Arch Linux" && {
            SYS="$(printf '%s\n' "$OS" | cut -d ':' -f 2 | cut -c 2-)"
            PACK=$(pacman -Q | wc -l)
            return
        }
    }

    hash pacman 2> /dev/null && {
        SYS="MSYS 2"
        PACK=$(pacman -Q | wc -l)
        return
    }

    hash xbps-install 2> /dev/null && {
        SYS="Void Linux"
        PACK=$(xbps-query -l | wc -l)
        return
    }
}

getVars() {
    USER="$USER"
    HOST="$(hostname)"
    KERN="$(uname -r)"
    TIME="$(uptime -p)"
    lspci | grep "Vega 20" 2>&1 > /dev/null && hash sensors 2> /dev/null && \
        GPU="$(gpu)"
}

workOutLineSize() {
    LINE1=$(printf '%s\n' "  $USER@$HOST | $SYS | $PACK Packages" | wc -m)
    LINE2=$(printf '%s\n' "  $KERN | $TIME" | wc -m)

    # find longest
    SIZE=0
    for i in $LINE1 $LINE2; do
        test $i -gt $SIZE && SIZE=$i
    done


    TERMSIZE=$(stty size < /dev/tty | cut -d\  -f 2)
    test $SIZE -ge $TERMSIZE && SIZE=$((TERMSIZE - 2))

    # get the extra characters each line needs
    LINE1EXTRA=$(printf '%*s' "$((SIZE - LINE1))" | sed 's/ / /')
    LINE2EXTRA=$(printf '%*s' "$((SIZE - LINE2))" | sed 's/ / /')
}

draw() {
    perc=$1
    size=$2
    color=$3

    inc=$((perc * size / 100))

    for i in $(seq 0 $((size - 1))); do
        test $i -le $inc && {
            out="${out}${FULL}"
        } || {
            out="${color}${out}${R}${f6}${EMPTY}${R}"
        }
    done

    test $perc -eq 100 && out="${color}${out}"
    printf '%s' "$out"
}

cpu() {
    cpu="$(grep 'cpu ' /proc/stat | \
        awk '{cpu=($2+$4)*100/($2+$4+$5)} END {print cpu}')"
    cpu=$(printf "%.0f" $cpu)

    printf "${f7}CPU${R} %s" "$(draw $cpu $SIZE $f4)"
}

gpubar() {
    TEMP="$(($(printf '%s\n' "$GPU" | cut -d\  -f 8 | cut -d\. -f1) - 35))"
    printf "${f7}GPU${R} %s" "$(draw $TEMP $SIZE $f1)"
}

ram() {
    ram="$(free | awk '/Mem:/ {print int($3/$2 * 100.0)}')"
    printf "${f7}RAM${R} %s" "$(draw $ram $SIZE $f2)"
}

battery() {
    BATTERY=$(find /sys/class/power_supply -maxdepth 1 -type l -name "BAT*")
    charge=$(sed '1q' $BATTERY/capacity)
    printf "${f7}BAT${R} %s" "$(draw $charge $SIZE $f7)"
}

getSystem
getVars

workOutLineSize

clear=$(tput sgr0)
clear

cat ~/.dots/ascii/bonsai

printf '\n'

printf '%s\n' "$f6▐$f7 $USER@$HOST | $PACK Packages $LINE1EXTRA$R"
printf '%s\n' "$f6▐$f7 $KERN | $TIME $LINE2EXTRA$R"

printf '\n'

SIZE=$((SIZE - 5))

printf '%s\n' "$(ram)"
printf '%s\n' "$(cpu)"
test ! -z "$GPU" && printf '%s\n' "$(gpubar)"
test -d "/sys/class/power_supply/BAT0" && printf '%s\n' "$(battery)"

printf '\n'
