#!/bin/sh
#
# fyr 2019 (c) CC | /bin/sh sysinfo
# thanks sshbio, xero, z3bra for providing ideas

FULL=${FULL-â–ª}
EMPTY=${EMPTY-â–¬}

f0='[30m'; f1='[31m'; f2='[32m'; f3='[33m'
f4='[34m'; f5='[35m'; f6='[36m'; f7='[37m'
b0='[40m'; b1='[41m'; b2='[42m'; b4='[44m'
b4='[44m'; b5='[45m'; b6='[46m'; b7='[47m'
B='[1m'; R='[0m'; I='[7m'

getSystem() {
    hash crux 2> /dev/null && {
        SYS="$(crux)"
        PACK="$(pkginfo -i | wc -l)"
        return
    }

    hash apk 2> /dev/null && {
        SYS="Alpine Linux $(cat /etc/alpine-release)"
        PACK=$(apk info | wc -l)
        return
    }

    hash hostnamectl 2> /dev/null && {
        OS=$(hostnamectl | grep "Operating System:")

        printf '%s\n' "$OS" | grep -q "Debian\|Ubuntu" && {
            SYS="DEBIAN version $(cat /etc/debian_version)"
            PACK=$(dpkg-query -f '${binary:Package}\n' -W | wc -l)
            return
        }

        printf '%s\n' "$OS" | grep -q "Arch Linux" && {
            SYS="$(printf '%s\n' "$OS" | cut -d ':' -f 2 | cut -c 2-)"
            PACK=$(pacman -Q | wc -l)
            return
        }
    }

    hash pacman 2> /dev/null && {
        SYS="MSYS 2"
        PACK=$(pacman -Q | wc -l)
        return
    }

    hash xbps-install 2> /dev/null && {
        SYS="Void Linux"
        PACK=$(xbps-query -l | wc -l)
        return
    }
}

getVars() {
    USER="$USER"
    HOST="$(hostname)"
    KERN="$(uname -sr)"
    TIME="$(uptime -p)"
    pgrep mpv 2>&1 > /dev/null && test -S "/tmp/mpvsocket" && \
        MPV="Playing: $(mpvc -f '%artist% - %title%')"
    lspci | grep "Vega 20" 2>&1 > /dev/null && hash sensors 2> /dev/null && gpu
}

workOutLineSize() {
    LINE1=$(printf '%s\n' "  $USER@$HOST" | wc -m)
    LINE2=$(printf '%s\n' "  $KERN - $TIME" | wc -m)
    LINE3=$(printf '%s\n' "  $SYS - $PACK Packages" | wc -m)
    LINE4=$(printf '%s\n' "  $MPV" | wc -m)
    LINE5=$(printf '%s\m' "  $GPU" | wc -m)

    # find longest
    SIZE=${SIZE-0}
    for i in $LINE1 $LINE2 $LINE3 $LINE4 $LINE5; do
        test $i -gt $SIZE && SIZE=$i
    done

    # add a space at the end
    SIZE=$((SIZE + 1))

    TERMSIZE=$(stty size < /dev/tty | cut -d\  -f 2)
    test $SIZE -ge $TERMSIZE && SIZE=$((TERMSIZE - 2))

    # get the extra characters each line needs
    LINE1EXTRA=$(printf '%*s' "$((SIZE - LINE1))" | sed 's/ / /')
    LINE2EXTRA=$(printf '%*s' "$((SIZE - LINE2))" | sed 's/ / /')
    LINE3EXTRA=$(printf '%*s' "$((SIZE - LINE3))" | sed 's/ / /')
    LINE4EXTRA=$(printf '%*s' "$((SIZE - LINE4))" | sed 's/ / /')
    LINE5EXTRA=$(printf '%*s' "$((SIZE - LINE5))" | sed 's/ /  /')
}

draw() {
    perc=$1
    size=$2
    color=$3

    inc=$((perc * size / 100))

    for i in $(seq 0 $((size - 1))); do
        test $i -le $inc && {
            out="${out}${FULL}"
        } || {
            out="${color}${out}${R}${f7}${EMPTY}${R}"
        }
    done

    test $perc -eq 100 && out="${color}${out}"
    printf '%s' "$out"
}

ram() {
    ram="$(free | awk '/Mem:/ {print int($3/$2 * 100.0)}')"
    printf "${f6}RAM${R} %s" "$(draw $ram $SIZE $f2)"
}

cpu() {
    cpu="$(grep 'cpu ' /proc/stat | \
        awk '{cpu=($2+$4)*100/($2+$4+$5)} END {print cpu}')"
    cpu=$(printf "%.0f" $cpu)

    printf "${f6}CPU${R} %s" "$(draw $cpu $SIZE $f3)"
}

gpu() {
    sensorOut="$(sensors)"
    VOLT=$(printf '%s\n' "$sensorOut"  | awk '/vddgfx/ {print $2,$3}')
    TEMP=$(printf '%s\n' "$sensorOut"  | awk '/temp1/ && $3 == "(crit" {print $2}' | cut -c 2-)
    POWER=$(printf '%s\n' "$sensorOut" | awk '/power1/ {print $2,$3}')
    SPEED=$(printf '%s\n' "$sensorOut" | awk '/fan1/ {print $2,$3}')

    GPU="Radeon VII: $VOLT | $TEMP | $POWER | $SPEED"
}

temperature() {
    TEMP=/sys/class/thermal/thermal_zone0/temp
    test -f $TEMP && {
        temp="$(($(cat $TEMP) / 1000))"
        printf "${f6}TMP${R} %s" "$(draw $temp $SIZE $f5)"
    }
}

battery() {
    BATTERYFILE=/sys/class/power_supply
    test -f /sys/class/power_supply && {
        BATTERY=$(find $BATTERYFILE -maxdepth 1 -type l -name "BAT*")
        charge=$(sed '1q' $BATTERY/capacity)
        printf "${f6}BAT${R} %s" "$(draw $charge $SIZE $f4)"
    }
}

getSystem
getVars

workOutLineSize

clear=$(tput sgr0)
clear

cat ~/.dots/ascii/bonsai

printf '\n'

printf '%s\n' "$f6â–ˆ$b7$f0 $USER@$HOST $LINE1EXTRA$R"
printf '%s\n' "$f6â–ˆ$b7$f0 $SYS | $PACK Packages $LINE3EXTRA$R"
printf '%s\n' "$f6â–ˆ$b7$f0 $KERN | $TIME $LINE2EXTRA$R"

# test ! -z "$GPU" && printf '%s\n' "$f6â–ˆ$b7$f0 $GPU $LINE5EXTRA$R"
# test ! -z "$MPV" && printf '%s\n' "$f6â–ˆ$b7$f0 $MPV $LINE4EXTRA$R"

printf '\n'

SIZE=$((SIZE - 4))

printf '%s\n' "$(ram)"
printf '%s\n' "$(cpu)"
test -f "$TEMP" && printf '%s\n' "$(temperature)"
test -d "$BATTERY" && printf '%s\n' "$(battery)"

printf '\n'
