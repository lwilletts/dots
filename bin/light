#!/usr/bin/env python3

# The On/Off code pairs correspond to the hand controller codes.
# True = '1', False ='0'

# OUT OF THE BOX: Plug the Pi Transmitter board into the Raspberry Pi
# GPIO pin-header ensuring correct polarity and pin alignment.

# The sockets will need to be inserted into separate mains wall sockets.
# with a physical separation of at least 2 metres to ensure they don't
# interfere with each other. Do not put into a single extension lead.

# For proper set up the sockets should be in their factory state with
# the red led flashing at 1 second intervals. If this is not the case for
# either socket, press and hold the green button on the front of the unit
# for 5 seconds or more until the red light flashes slowly.

# A socket in learning mode will be listening for a control code to be
# sent from a transmitter. A socket can pair with up to 2 transmitters
# and will accept the following code pairs

# A socket in learning mode should accept the first code it receives
# If you wish the sockets to react to different codes, plug in and
# program first one socket then the other using this program.

# When the code is accepted you will see the red lamp on the socket
# flash quickly then extinguish

import RPi.GPIO as GPIO
import argparse
import atexit
import time


def exit_handle():
    GPIO.cleanup()
    exit


def gpio_setup():
    # set the pins numbering mode
    GPIO.setmode(GPIO.BOARD)

    # select the GPIO pins used for the encoder K0-K3 data inputs
    GPIO.setup(11, GPIO.OUT)
    GPIO.setup(15, GPIO.OUT)
    GPIO.setup(16, GPIO.OUT)
    GPIO.setup(13, GPIO.OUT)

    # select the signal to select ASK/FSK
    GPIO.setup(18, GPIO.OUT)

    # select the signal used to enable/disable the modulator
    GPIO.setup(22, GPIO.OUT)

    # disable the modulator by setting CE pin low
    GPIO.output(22, False)

    # Set the modulator to ASK for On Off Keying by setting MODSEL pin low
    GPIO.output(18, False)

    # initialise K0-K3 inputs of the encoder to 0000
    GPIO.output(11, False)
    GPIO.output(15, False)
    GPIO.output(16, False)
    GPIO.output(13, False)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("socket")
    parser.add_argument("power")

    args = parser.parse_args()

    atexit.register(exit_handle)

    gpio_setup()

    if args.socket == "1":
        # 1111 and 0111 socket 1 ON and OFF
        GPIO.output(11, True)
        GPIO.output(15, True)
        GPIO.output(16, True)
    elif args.socket == "2":
        # 1110 and 0110 socket 2 ON and OFF
        GPIO.output(11, True)
        GPIO.output(15, True)
        GPIO.output(16, False)
    elif args.socket == "3":
        # 1101 and 0101 socket 3 ON and OFF
        GPIO.output(11, True)
        GPIO.output(15, False)
        GPIO.output(16, True)
    elif args.socket == "4":
        # 1100 and 0100 socket 4 ON and OFF
        GPIO.output(11, True)
        GPIO.output(15, False)
        GPIO.output(16, False)
    elif args.socket == "all":
        # 0011 and 1011 all sockets ON and OFF
        GPIO.output(11, False)
        GPIO.output(15, True)
        GPIO.output(16, True)

    if args.power == "on":
        GPIO.output(13, True)
    elif args.power == "off":
        GPIO.output(13, False)

    # let it settle, encoder requires this
    time.sleep(0.1)
    # enable the modulator
    GPIO.output(22, True)
    # keep enabled for a period
    time.sleep(0.25)
    # disable the modulator
    GPIO.output(22, False)


main()
