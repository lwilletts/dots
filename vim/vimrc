" fyr


    " vim-plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"{{{
" auto install plug if not found
if empty(glob('$HOME/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall
endif

nmap <Leader>Vu :PlugUpdate<CR>
nmap <Leader>Vi :PlugUpgrade<CR>
nmap <Leader>Vc :PlugClean<CR>
nmap <Leader>Vs :PlugStatus<CR>
let g:plug_retries = 0
let g:plug_window = "tabnew"

call plug#begin('$HOME/.vim/plugged')

    " usability
Plug 'tpope/vim-repeat'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-commentary'
Plug 'rbgrouleff/bclose.vim'
Plug 'pgdouyon/vim-evanesco'
Plug 'lwilletts/autoswap.vim'

Plug 'tpope/vim-surround'
    nmap sl yss
    nmap sw ysiw
    nmap sW ysiW
    nmap sap ysap
    nmap sip ysip

    " file opening
Plug 'dylanaraps/fff.vim'
    let g:fff#split = "8new"
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
    nmap <Leader>f :FZF -m <CR>
    nmap <Leader>F :FZF -m ~/<CR>
    nmap <Leader>b :Buffers<CR>

    let g:fzf_layout = { 'down': '~40%' }
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'Normal', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'ErrorMsg', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'ErrorMsg'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

    " build checkers
Plug 'benekastah/neomake'
    let g:neomake_open_list = 1
    let g:neomake_place_signs = 1
    let g:neomake_error_sign = {
        \ 'text': 'E>',
        \ 'texthl': 'Error',
    \ }
    let g:neomake_warning_sign = {
        \ 'text': 'W>',
        \ 'texthl': 'TermCursorNC',
    \ }

    " linting
Plug 'dense-analysis/ale'
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '..'
    let g:ale_set_highlights = 1
    let g:ale_sign_column_always = 1

    nmap <silent> <C-j> <Plug>(ale_next_wrap)
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)

    " async
Plug 'skywind3000/asyncrun.vim'

    "  intelligent tab
Plug 'ervandew/supertab'
    let g:SuperTabDefaultCompletionType = "<c-n>"
    let g:SuperTabContextDefaultCompletionType = "<c-p>"

if has('nvim')
    if has('python3')
        function! DoRemote(arg)
          UpdateRemotePlugins
        endfunction

        Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }

        let g:deoplete#enable_at_startup = 1
        let g:deoplete#enable_smart_case = 1
        let g:deoplete#enable_ignore_case = 0
        let g:deoplete#auto_complete_start_length = 1
    endif
endif

    " custom syntax && preview
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
    nnoremap <Leader>om :MarkdownPreview<CR>

Plug 'baskerville/vim-sxhkdrc'

call plug#end()
"}}}

    " Remapping Keys
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"{{{
nnoremap K <nop>
nnoremap <C-u> <nop>

map <Space> <Leader>
nnoremap <Leader>c :noh<CR>
nnoremap <Leader><Space> <C-f>

" edit and source vimrc on save
nmap <silent> <Leader>E :next $MYVIMRC<CR>
augroup VimReload
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" reload file automatically
set autoread

" saving and closing
nmap <Leader>w :w!<CR>
nmap <Leader>W :wa!<CR>
nmap <Leader>x :xa!<CR>
nmap <Leader>q :Bclose!<CR>
nmap <C-q> :qa!<CR>
nmap <C-s> :silent w! !sudo tee % > /dev/null<CR>

" replace word under cursor globally
nnoremap <Leader>* :%s/\<<c-r><c-w>\>//g<left><left>

" manipulating text in normal mode
nnoremap <CR> a<CR><ESC>
nnoremap <Tab> i<Tab><ESC>l

" formatting options
nmap <Leader>gq vipgq
nmap <Leader>gc vipgc

" better pasting
xnoremap p pgvy

" swapping like for like keys
nnoremap ` '
nnoremap ' `
nnoremap # *
nnoremap * #

" ctrl-backspace
" inoremap C-h BdWx

" remove trailing whitespace
nmap <Leader>z mz:%s/\s\+$<CR>'z:w<CR>:noh<CR>

" toggles
nmap <Leader>v :set spell!<CR>
nmap <Leader>n :set number!<CR>

" visual mappings
nnoremap v <C-v>
nnoremap <C-v> v
vnoremap j gj
vnoremap k gk
vnoremap 0 g^
vnoremap $ g$
vnoremap < <gv
vnoremap > >gv

" buffers
nnoremap <C-n> :bnext<CR>
nnoremap <C-p> :bprev<CR>

" tabs
nmap <Leader>tn :tabnew %<CR>
nmap <Leader>to :tabonly<CR>
nmap <Leader>tc :tabclose<CR>
nmap <Leader>ts :tab sball<CR>:tabnext<CR>
nnoremap H :tabprevious<CR>
nnoremap L :tabnext<CR>

" reverse splits
nnoremap <C-w>s <C-w>v
nnoremap <C-w>v <C-w>s
" more natural splitting
set splitright
set splitbelow

" spellcheck
nnoremap <Leader>= 1z=
nnoremap zn ]s
nnoremap zp [s

" auto expansion
inoremap (<CR> (<CR>)<ESC>O
inoremap {<CR> {<CR>}<ESC>O
inoremap [<CR> [<CR>]<ESC>O
inoremap {; {<CR>};<ESC>O
inoremap {, {<CR>},<ESC>O
inoremap [; [<CR>];<ESC>O
inoremap [, [<CR>],<ESC>O

" make
nnoremap <Leader>m :make<CR>

" external program launching
nnoremap <Leader>op :AsyncRun! zathura %:r.pdf<CR>
nnoremap <Leader>ob :AsyncRun! qutebrowser %:r.html<CR>
vnoremap <Leader>s :! awk '{ print length(), $0 \| "sort -n \| cut -d\\  -f2-"}'<CR>

    " Mappings for Custom Functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" make current file executable
nmap <silent> <Leader>C :Chmox<CR>

" gotta get down tonight
nnoremap <silent> <Plug>(RotateLines) :<C-u>call <SID>RotateLines()<CR>
nmap <Leader>R <Plug>(RotateLines)

" correct default help to custom help function
cabbrev h H
cabbrev help H

nmap <Leader>I :call <SID>SynStack()<CR>
"}}}

    " Visual Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"{{{
set title
set titlestring=nvim:\ %t titlelen=50

set shortmess+=I
set equalalways
set noshowcmd
set noshowmode
set laststatus=0
" set statusline=%f

" fuck the readonly warning
au BufEnter * set noro

syntax on

try
    colorscheme lightish
catch
endtry

set colorcolumn=81

" cursor always placed in middle
set scrolloff=999
" cursor allowed to exist where there is no character in visual block mode
set virtualedit=block

" blank character between splits
set fillchars=vert:\ ,

set hidden
set showmatch
set lazyredraw

" permanent signcolumn
set signcolumn=yes

" use marker folding by default
set foldmethod=marker
"}}}

    " General Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"{{{
" set zsh as our default shell
let shell="/bin/zsh"

" change $PWD to current file location
set autochdir

" enable annoying mouse
set mouse+=a

" autosave file on focus loss
set autowrite
autocmd! FocusLost * silent! :wa

" spell limit
" set spellsuggest+=5

" stop leader timeout
set ttimeout
set notimeout

" stop wrapping
set nowrap

" sane backspace
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" sane searching
set incsearch ignorecase smartcase

" better wildcard matching
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.o,*~,*.pyc,*/.git/*
set wildignore+=*.gif,*.png,*.jp*

" completion menu
set completeopt=menu,preview

" defaults
set tw=79
set ts=4 sw=4 sts=4
set smarttab expandtab

" turn filetype subsystem on
filetype plugin indent on

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

autocmd! FileType c      setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd! FileType sh     setlocal makeprg=sh\ %\
autocmd! FileType md     setlocal spell makeprg=pandoc\ %\ -o\ %:r.pdf
autocmd! FileType tex    setlocal spell makeprg=pdflatex\ %
autocmd! FileType txt    setlocal tw=0 spell noexpandtab wrap linebreak
autocmd! FileType css    setlocal ts=4 sw=4 sts=4
autocmd! FileType html   setlocal ts=2 sw=2 sts=2
autocmd! FileType ruby   setlocal ts=2 sw=2 sts=2
autocmd! FileType python setlocal ts=4 sw=4 sts=4

" filetype event map
autocmd! BufNewFile,BufRead *fstab           setlocal filetype=fstab tw=0
autocmd! BufNewFile,BufRead *Pkgfile         setlocal filetype=sh noet
autocmd! BufNewFile,BufRead *.gitconfig      setlocal filetype=gitconfig noet
autocmd! BufNewFile,BufRead *.zsh,*.zprofile setlocal filetype=sh

" filetype write
autocmd! BufWritePost *.tex silent make %

set history=1000

set backup
set directory=~/.vim/swap
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
set backupdir=~/.vim/backup
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif

if has('persistent_undo')
    set undofile
    set undoreload=5000
    set undolevels=5000
    set undodir=~/.vim/undo

    if !isdirectory(expand(&undodir))
        call mkdir(expand(&undodir), "p")
    endif
endif

" always jump to the last known cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ exe "normal! g`\"" |
\ endif

if has('nvim')
    " settings
    set list
    set breakindent

    " keybindings
    nmap <Leader>dd :term<CR>
    nmap <Leader>dv :split<CR>:term<CR>
    nmap <Leader>ds :vsplit<CR>:term<CR>

    tnoremap <C-e> <C-\><C-n>
    nnoremap <Leader>j <c-\><c-n><c-w>j
    nnoremap <Leader>k <c-\><c-n><c-w>k
    nnoremap <Leader>h <c-\><c-n><c-w>h
    nnoremap <Leader>l <c-\><c-n><c-w>l

    " jump to insert mode automatically
    autocmd BufEnter *
    \ if &buftype == "terminal" |
    \ startinsert |
    \ endif

    " close terminal buffer immediately
    autocmd TermClose * silent! bd!

    function! QuickTerminal()
        10new
        terminal
    endfunction

    nnoremap <silent> <Leader>t :call QuickTerminal()<CR>
endif
"}}}

    " functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"{{{
" open current file with <program>
function! Openwith(program)
    silent! execute "!" . a:program . " " . expand('%:p') . " &"
endfunction

command! -bang -nargs=* Openwith call Openwith(<q-args>)

" chmod +x current file
function! Chmox()
    execute "!chmod +x " . expand('%:p')
endfunction

command! Chmox call Chmox()

function! s:RotateString(string)
    let split_string = split(a:string, '\zs')
    return join(split_string[-1:] + split_string[:-2], '')
endfunction

function! s:RotateLine(line, leading_whitespace, trailing_whitespace)
    return substitute(
        \ a:line,
        \ '^\(' . a:leading_whitespace . '\)\(.\{-}\)\(' . a:trailing_whitespace . '\)$',
        \ '\=submatch(1) . <SID>RotateString(submatch(2)) . submatch(3)',
        \ ''
    \ )
endfunction

function! s:RotateLines()
    set nolist
    let saved_view = winsaveview()
    let first_visible_line = line('w0')
    let last_visible_line = line('w$')
    let lines = getline(first_visible_line, last_visible_line)
    let leading_whitespace = map(
        \ range(len(lines)),
        \ 'matchstr(lines[v:val], ''^\s*'')'
    \ )
    let trailing_whitespace = map(
        \ range(len(lines)),
        \ 'matchstr(lines[v:val], ''\s*$'')'
    \ )
    try
        while 1 " <C-c> to exit
            let lines = map(
                \ range(len(lines)),
                \ '<SID>RotateLine(lines[v:val], leading_whitespace[v:val], trailing_whitespace[v:val])'
            \ )
            call setline(first_visible_line, lines)
            redraw
            sleep 50m
        endwhile
    finally
        set list
        if &modified
            silent undo
        endif
        call winrestview(saved_view)
    endtry
endfunction

" open help in own buffer without split
function! FullScreenHelp(helpfile)
    enew
    set bt=help
    execute "help " . a:helpfile
    set buflisted
endfunction

command! -nargs=1 -complete=help H call FullScreenHelp(<f-args>)

" information about current highlighting
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction
    "}}}
